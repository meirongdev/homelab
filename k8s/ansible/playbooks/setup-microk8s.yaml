- name: Install MicroK8s on all nodes
  hosts: k8s_cluster
  become: true
  pre_tasks:
    - name: Wait for snapd to be fully ready by polling 'snap list'
      ansible.builtin.command: snap list
      register: snap_list_result
      until: snap_list_result.rc == 0
      retries: 15
      delay: 10
      changed_when: false

  tasks:
    - name: Check if MicroK8s is already installed
      ansible.builtin.command: snap list microk8s
      register: microk8s_check
      failed_when: false
      changed_when: false

    - name: Install MicroK8s using snap command
      ansible.builtin.command: snap install microk8s --classic
      when: microk8s_check.rc != 0
      # Only install if the previous check failed (meaning microk8s is not installed)

    - name: Add ubuntu user to microk8s group
      ansible.builtin.user:
        name: ubuntu
        groups: microk8s
        append: true

- name: Configure Firewall on all nodes
  hosts: k8s_cluster
  become: true
  tasks:
    - name: Allow SSH connections
      community.general.ufw:
        rule: allow
        name: OpenSSH

    - name: Allow all traffic from other k8s nodes
      community.general.ufw:
        rule: allow
        src: "{{ hostvars[item]['ansible_host'] }}"
      loop: "{{ groups['k8s_cluster'] }}"

    - name: Allow traffic on CNI pods' CIDR (Calico)
      community.general.ufw:
        rule: allow
        src: 10.1.0.0/16

    # --- NEW TASK: Allow Kubernetes API Server access ---
    - name: Allow Kubernetes API Server access (port 16443)
      community.general.ufw:
        rule: allow
        port: '16443'
        proto: tcp
      when: inventory_hostname in groups['k8s_masters']
      # Only apply this rule to master nodes

    - name: Enable ufw
      community.general.ufw:
        state: enabled

- name: Initialize Master Node and Generate Join Tokens
  hosts: k8s_masters
  become: true
  tasks:
    - name: Wait for MicroK8s to be ready
      ansible.builtin.command: microk8s status --wait-ready
      changed_when: false

    - name: Generate a unique join token for each worker node
      ansible.builtin.command: microk8s add-node
      register: join_command_result
      loop: "{{ groups['k8s_workers'] }}"
      loop_control:
        loop_var: worker_host
      changed_when: false

    - name: Set the unique join command as a fact for each worker
      ansible.builtin.set_fact:
        join_command: "{{ item.stdout_lines | select('search', 'microk8s join') | first }}"
      loop: "{{ join_command_result.results }}"
      loop_control:
        index_var: idx
      delegate_to: "{{ groups['k8s_workers'][idx] }}"
      delegate_facts: true

- name: Join Worker Nodes to the Cluster
  hosts: k8s_workers
  become: true
  tasks:
    - name: Join the cluster using the unique token
      ansible.builtin.command: "{{ join_command }}"
      register: join_result
      changed_when: "'Contacting cluster' in join_result.stdout"

- name: Enable Addons on Master
  hosts: k8s_masters
  become: true
  tasks:
    - name: Enable core addons (DNS, default storage, dashboard)
      ansible.builtin.command: "microk8s enable {{ item }}"
      loop:
        - dns
        - hostpath-storage
        - dashboard
      changed_when: true